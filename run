#!/bin/bash

nshards=147

die() {
    echo "ERROR: $*"
    exit 1
}


check_shards() {
    numshards=$(ls shards/imagenet-train-??????.tar | wc -l)
    if [[ $numshards != $nshards ]]; then die "wrong # shards in ./shards (got: $numshards, wanted: $nshards)"; fi
}


cmd_clean() { # remove temporary files
    rm -f *-info.txt
    rm -f *.pth *.pth.tar
    rm -f *.log
}

cmd_venv() { # set up a virtualenv
    test -d venv || python3 -m venv venv
    source venv/bin/activate
    pip3 install -U pip
    pip3 install -U numpy scipy
    pip3 install torch==1.8.1+cu111 torchvision==0.9.1+cu111 torchaudio==0.8.1 -f https://download.pytorch.org/whl/torch_stable.html
    pip3 install -U -r requirements.txt
}

cmd_train() { # run training using PyTorch lightning
    check_shards
    source venv/bin/activate
    python3 train.py "$@"
}

cmd_makeshards() {  # make shards from ImageNet data
    test -d ./data/train || die "./data/train: does not exist"
    test -d ./data/val || die "./data/val: does not exist"
    test -d ./shards || die "./shards: must exist and be directory"
    source venv/bin/activate
    python3 makeshards.py "$@"
}


cmd_twonode() {
    master=$1; shift
    rank=$1; shift
    env MASTER_ADDR=$master MASTER_PORT=${9988:-port} LOCAL_RANK=$rank python3 train.py --accelerator ddp --num_nodes 2 --gpus 1 --local_rank=$rank
}


cmd="${1:-help}"
shift

set -e

case $cmd in
help)
    echo; echo available commands:; echo
    grep '^cmd_[_0-9a-z]*() {' "$0" | sed 's/cmd_//;s/\(.*\)() *{* *#* */\1 -- /'
    ;;
*.py)
    # cmd_versions
    set -e
    # hg status grep -v '^M ' > /dev/null
    source venv/bin/activate
    export OMP_NUM_THREADS=1
    python3 "$cmd" "$@"
    ;;
*)
    set -e
    eval "cmd_$cmd" "$@"
    ;;
esac
